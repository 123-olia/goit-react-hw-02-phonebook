{"version":3,"sources":["Components/ContactListItem/ContactListItem.module.scss","Components/ContactForm/ContactForm.js","Components/ContactListItem/ContactListItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","this","onSubmit","type","onChange","required","className","styles","margin","btn","Component","ContactListItem","el","removeEl","listItem","onClick","ContactList","contacts","deleteContact","map","contact","key","id","delCont","Filter","handleChangeFilter","filter","App","addContact","find","alert","uuidv4","prevState","event","persist","filteredContact","toLowerCase","includes","contactId","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,SAAW,kCAAkC,IAAM,6BAA6B,OAAS,kC,mOC8D5FC,E,4MA3DbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,aAAe,SAACC,GAAO,IAAD,EACIA,EAAEC,OAAlBJ,EADY,EACZA,KAAMK,EADM,EACNA,MAEd,EAAKC,SAAL,eAAiBN,EAAOK,K,EAG1BE,aAAe,SAACJ,GACdA,EAAEK,iBAEF,EAAKC,MAAMC,aAAa,EAAKX,MAAMC,KAAM,EAAKD,MAAME,QAEpD,EAAKK,SAAS,CACZN,KAAM,GACNC,OAAQ,M,uDAIF,IAAD,EACkBU,KAAKZ,MAAtBC,EADD,EACCA,KAAMC,EADP,EACOA,OAEd,OACE,0BAAMW,SAAUD,KAAKJ,cACnB,sCAEE,6BACA,2BACEM,KAAK,OACLR,MAAOL,EACPA,KAAK,OACLc,SAAUH,KAAKT,aACfa,UAAQ,KAGZ,6BACA,wCAEE,6BACA,2BACEC,UAAWC,IAAOC,OAClBL,KAAK,MACLR,MAAOJ,EACPD,KAAK,SACLc,SAAUH,KAAKT,gBAGnB,6BACA,4BAAQc,UAAWC,IAAOE,IAAKN,KAAK,UAApC,oB,GApDkBO,aCUXC,EATS,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,SAAP,OACtB,wBAAIP,UAAWC,IAAOO,UACnBF,EAAGtB,KADN,KACcsB,EAAGrB,OACf,4BAAQe,UAAWC,IAAOE,IAAKM,QAASF,GAAxC,YCWWG,EAdK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,cAAb,OAClB,iCACE,4BACGD,EAASE,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CACEC,IAAKD,EAAQE,GACbV,GAAIQ,EACJG,QAAS,kBAAML,EAAcE,EAAQE,aCQhCE,EAhBF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,mBAAoBC,EAAa,EAAbA,OAClC,OACE,iCACE,uDAEE,2BACEtB,SAAUqB,EACV9B,MAAO+B,EACPpC,KAAK,SACLa,KAAK,Y,QCoEAwB,E,4MAtEbtC,MAAQ,CACN4B,SAAU,GACVS,OAAQ,I,EAGVE,WAAa,SAACtC,EAAMC,GAClB,GAAI,EAAKF,MAAM4B,SAASY,MAAK,SAACT,GAAD,OAAa9B,IAAS8B,EAAQ9B,QACzDwC,MAAMxC,EAAO,+BADf,CAKA,IAAM8B,EAAU,CACdE,GAAIS,cACJzC,OACAC,UAGF,EAAKK,UAAS,SAACoC,GACb,MAAO,CACLf,SAAS,GAAD,mBAAMe,EAAUf,UAAhB,CAA0BG,U,EAKxCK,mBAAqB,SAACQ,GACpBA,EAAMC,UACN,EAAKtC,UAAS,WACZ,MAAO,CAAE8B,OAAQO,EAAMvC,OAAOC,W,EAIlCwC,gBAAkB,WAAO,IAAD,EACO,EAAK9C,MAA1B4B,EADc,EACdA,SAAUS,EADI,EACJA,OAClB,OAAOT,EAASS,QAAO,SAACT,GAAD,OACrBA,EAAS3B,KAAK8C,cAAcC,SAASX,EAAOU,mB,EAIhDlB,cAAgB,SAACoB,GACf,EAAK1C,UAAS,WACZ,MAAO,CACLqB,SAAU,EAAK5B,MAAM4B,SAASS,QAC5B,SAACN,GAAD,OAAaA,EAAQE,KAAOgB,U,uDAOlC,OACE,6BACE,yCACA,kBAAC,EAAD,CAAatC,aAAcC,KAAK2B,aAEhC,wCACC3B,KAAKZ,MAAM4B,SAASsB,OAAS,GAC5B,kBAAC,EAAD,CACEd,mBAAoBxB,KAAKwB,mBACzBC,OAAQzB,KAAKZ,MAAMqC,SAGvB,kBAAC,EAAD,CACET,SAAUhB,KAAKkC,kBACfjB,cAAejB,KAAKiB,qB,GAhEZR,aCGE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d73839d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__1BE5u\",\"btn\":\"ContactListItem_btn__wK5y4\",\"margin\":\"ContactListItem_margin__3k4dN\"};","import React, { Component } from \"react\";\r\nimport styles from \"../ContactListItem/ContactListItem.module.scss\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddContact(this.state.name, this.state.number);\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            name=\"name\"\r\n            onChange={this.handleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Number\r\n          <br />\r\n          <input\r\n            className={styles.margin}\r\n            type=\"tel\"\r\n            value={number}\r\n            name=\"number\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button className={styles.btn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport styles from \"./ContactListItem.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactListItem = ({ el, removeEl }) => (\r\n  <li className={styles.listItem}>\r\n    {el.name}: {el.number}\r\n    <button className={styles.btn} onClick={removeEl}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nexport default ContactListItem;\r\n\r\nContactListItem.propTypes = {\r\n  el: PropTypes.object.isRequired,\r\n  removeEl: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => (\r\n  <section>\r\n    <ul>\r\n      {contacts.map((contact) => (\r\n        <ContactListItem\r\n          key={contact.id}\r\n          el={contact}\r\n          delCont={() => deleteContact(contact.id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  </section>\r\n);\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nlet Filter = ({ handleChangeFilter, filter }) => {\r\n  return (\r\n    <section>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          onChange={handleChangeFilter}\r\n          value={filter}\r\n          name=\"filter\"\r\n          type=\"text\"\r\n        />\r\n      </label>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  handleChangeFilter: PropTypes.func,\r\n  filter: PropTypes.string,\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport ContactForm from \"./Components/ContactForm/ContactForm\";\nimport ContactList from \"./Components/ContactList/ContactList\";\nimport Filter from \"./Components/Filter/Filter\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  addContact = (name, number) => {\n    if (this.state.contacts.find((contact) => name === contact.name)) {\n      alert(name + \" is already in contacts\");\n      return;\n    }\n\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    this.setState((prevState) => {\n      return {\n        contacts: [...prevState.contacts, contact],\n      };\n    });\n  };\n\n  handleChangeFilter = (event) => {\n    event.persist();\n    this.setState(() => {\n      return { filter: event.target.value };\n    });\n  };\n\n  filteredContact = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contacts) =>\n      contacts.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  deleteContact = (contactId) => {\n    this.setState(() => {\n      return {\n        contacts: this.state.contacts.filter(\n          (contact) => contact.id !== contactId\n        ),\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={this.addContact} />\n\n        <h2>Contacts</h2>\n        {this.state.contacts.length > 1 && (\n          <Filter\n            handleChangeFilter={this.handleChangeFilter}\n            filter={this.state.filter}\n          />\n        )}\n        <ContactList\n          contacts={this.filteredContact()}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}